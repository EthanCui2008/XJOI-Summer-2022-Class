// Bugged
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
vector<vector<int>> maze;
vector<vector<int>> visited;
int xn;
int yn;
int k;
bool checkValid(int x, int y) {
    if(x < 0 || y < 0 || x >= xn || y >= yn || maze[x][y] || visited[x][y]){return false;}
    return true;
}
struct point{
    int x,y;
    point(int a, int b) : x(a), y(b) {}
};
int main() {
    int dx[4] = {0,1,0,-1};
    int dy[4] = {1,0,-1,0};
    int count;
    queue<point> que;
    while (true){
        cin >> yn;
        cin >> xn;
        if (xn == 0 and yn == 0){
            break;
        }
        maze = vector<vector<int>>(xn, vector<int>(yn, 0));
        visited = vector<vector<int>>(xn, vector<int>(yn, 0));
        count = 0;
        for (int x = 0; x < xn; x ++){
            string line;
            cin >> line;
            for (int y = 0; y < yn; y ++){
                char ch = line.at(y);
                if (ch == '#'){
                    maze[x][y] = 1;
                }
                else if(ch == '@'){
                    point p(x,y);
                    que.push(p);
                }
            }
        }
        int x,y;
        while (!que.empty()) {
            point cP = que.front();
            x = cP.x;
            y = cP.y;
            que.pop();
            int nx, ny;
            for (int i = 0; i < 4; i++) {
                nx = x + dx[i];
                ny = y + dy[i];
                if (checkValid(nx, ny)) {
                    count++;
                    visited[nx][ny] = 1;
                    que.push(point(nx, ny));
                    if(nx == xn-1 && ny == yn-1) { break; }
                }
            }
        }
        cout << count << endl;
    }
}
